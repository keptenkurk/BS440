#!/usr/bin/env python
# coding: utf-8
#-----------------------------------------------------------------------------------------
# BS440 plugin BS440flask.py
#
# About:
# Run a web server at [local_machine_IP]:[port] where port is 5440 by default.
# Provide access from local network to charts generated by BS440plot.py 
# See README.md for setting initialisation file, firewall and automatic background run at boot
#
# Requirements:
# BS440 plugin BS440csv.py
#
# Dependencies (install with 'sudo -H pip install packagename'):
# flask
#
__author__ = 'DjZU'
__email__ = "djzu89@gmail.com"
__license__ = "EUPL-1.1"
__version__ = "1.0.1"
__status__ = "Production"
#
#------------------------------------------------------------------------------------------
from flask import Flask, request, redirect, render_template, url_for
from ConfigParser import SafeConfigParser
import logging
import os
import sys

# BS440webapp config
dirname = os.path.dirname(__file__)
config = SafeConfigParser()
config.read('BS440webapp.ini')
host = config.get('Flask', 'host')
port = int(config.get('Flask', 'port'))
personsdata = []
persons = []
for section_name in config.sections():
	if config.has_option(section_name, 'username'):
		persons.append(config.get(section_name, 'username'))
		personsdata.append(persons)


if personsdata == []:
	sys.exit(127)

#------------------------------------------------------------------------------------------
# Flask
#------------------------------------------------------------------------------------------
app = Flask(__name__)

@app.route('/')

def index():

	return render_template('login.html', enumerate=enumerate, list=list, persons=persons)


@app.route('/<int:personID>')
@app.route('/<int:personID>/')

def redirection_person_days(personID):

	return redirect('/' + str(personID) + '/' + '31')


@app.route('/<int:personID>/<int:days>')
@app.route('/<int:personID>/<int:days>/')

def person(personID, days):

	def updatePlot():
		os.system('python BS440plot.py -p ' + str(personID) + ' -w ' + str(days))

	personsection = 'Person' + str(personID)
	if config.has_section(personsection):
		person = config.get(personsection, 'username')
	else:

		return redirect('/')

	plotTemplate = 'plot-' + str(personID) + '-' + str(days) + '.html'
	plotFile = './templates/' + plotTemplate
	plotPath = os.path.join(dirname, plotFile)
	csvFile = '../BS440csv/' + str(personID) + '.csv'
	csvPath = os.path.join(dirname, csvFile)

	# Update plot only if CSV contains new data
	if os.path.isfile(csvPath):
		if os.path.isfile(plotPath):
			if (os.path.getmtime(csvPath) > os.path.getmtime(plotPath) ):
				updatePlot()

		else:
			updatePlot()

	else:

		return redirect('/')

	return render_template('person.html', person=person, days=days, plotFile=plotTemplate)


if __name__ == '__main__':

	app.run(host=host, port=port, debug=True)


